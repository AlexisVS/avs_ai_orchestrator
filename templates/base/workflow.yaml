# Template Parent - Workflow commun √† tous les projets
# Toutes les √©tapes immutables du processus de d√©veloppement

workflow:
  name: "Universal TDD Workflow"
  version: "1.0"
  description: "Workflow universel TDD avec GitHub integration"
  
  # √âtapes communes obligatoires pour tous les projets
  phases:
    - name: "setup"
      description: "Configuration initiale du projet"
      required: true
      tasks:
        - validate_config
        - test_ai_connection
        - create_project_structure
        
    - name: "github_sync" 
      description: "Synchronisation GitHub (repo, project, issues)"
      required: true
      tasks:
        - create_or_validate_repo
        - create_github_project
        - sync_project_columns
        - create_issues_from_template
        - link_issues_to_project
        
    - name: "tdd_red"
      description: "Phase RED - Tests qui √©chouent"
      required: true
      tasks:
        - generate_failing_tests
        - run_tests_expect_failure
        - update_github_issue_status
        
    - name: "tdd_green"
      description: "Phase GREEN - Code minimal pour tests passants"
      required: true
      tasks:
        - generate_minimal_implementation
        - run_tests_expect_success
        - update_github_issue_status
        
    - name: "tdd_refactor"
      description: "Phase REFACTOR - Am√©lioration du code"
      required: true
      tasks:
        - refactor_code
        - run_tests_confirm_success
        - run_quality_checks
        - update_github_issue_status
        
    - name: "validation"
      description: "Validation finale obligatoire"
      required: true
      tasks:
        - run_all_tests
        - check_code_coverage
        - run_linting
        - run_type_checking
        - security_scan
        - performance_check
        
    - name: "completion"
      description: "Finalisation du projet"
      required: true  
      tasks:
        - generate_documentation
        - update_readme
        - close_github_issues
        - create_release_tag
        - deploy_if_configured

# Configuration GitHub commune
github:
  project_columns:
    - name: "üìã To Do"
      purpose: "Issues en attente"
      
    - name: "üî¥ RED Phase"
      purpose: "Tests en √©chec (phase RED TDD)"
      
    - name: "üü¢ GREEN Phase" 
      purpose: "Tests passants (phase GREEN TDD)"
      
    - name: "üîÑ REFACTOR Phase"
      purpose: "Am√©lioration code (phase REFACTOR)"
      
    - name: "‚úÖ Done"
      purpose: "Issues termin√©es et valid√©es"
      
    - name: "üö´ Blocked"
      purpose: "Issues bloqu√©es n√©cessitant intervention"

  # Labels standards pour toutes les issues
  standard_labels:
    - name: "tdd-red"
      color: "d73a4a"
      description: "Phase RED du cycle TDD"
      
    - name: "tdd-green" 
      color: "28a745"
      description: "Phase GREEN du cycle TDD"
      
    - name: "tdd-refactor"
      color: "0366d6"
      description: "Phase REFACTOR du cycle TDD"
      
    - name: "tests-required"
      color: "fbca04"
      description: "N√©cessite des tests"
      
    - name: "quality-check"
      color: "7057ff"
      description: "V√©rification qualit√© requise"
      
    - name: "documentation"
      color: "0075ca"
      description: "Documentation n√©cessaire"
      
    - name: "blocked"
      color: "d4c5f9"  
      description: "Bloqu√© - intervention requise"

# Validation de qualit√© commune
quality_gates:
  # Tous les projets DOIVENT respecter ces crit√®res
  mandatory_checks:
    - name: "tests_passing"
      description: "Tous les tests doivent passer"
      blocking: true
      
    - name: "code_coverage"
      description: "Couverture de code minimum"
      threshold: 80
      blocking: true
      
    - name: "no_lint_errors"
      description: "Aucune erreur de linting"
      blocking: true
      
    - name: "type_checking"
      description: "V√©rification des types (si applicable)"
      blocking: true
      
    - name: "security_scan"
      description: "Scan de s√©curit√© de base"
      blocking: false  # Warning seulement
      
  # Checks optionnels configurables par projet
  optional_checks:
    - name: "performance_benchmark"
      description: "Tests de performance"
      
    - name: "accessibility_check"
      description: "Tests d'accessibilit√© (UI)"
      
    - name: "cross_browser_test"
      description: "Tests multi-navigateurs (web)"

# Configuration IA commune
ai_prompts:
  system_base: |
    Tu es un d√©veloppeur expert qui applique rigoureusement le TDD (Test-Driven Development).
    
    R√àGLES ABSOLUES:
    1. TOUJOURS √©crire les tests AVANT le code (RED phase)
    2. √âcrire le code MINIMAL pour faire passer les tests (GREEN phase)  
    3. Refactoriser pour am√©liorer sans casser les tests (REFACTOR phase)
    4. Suivre les bonnes pratiques de ton langage/framework
    5. G√©n√©rer du code FONCTIONNEL sans erreur
    6. Documenter le code de mani√®re claire
    7. Respecter les conventions de nommage
    8. Optimiser pour la lisibilit√© et la maintenabilit√©
    
    IMPORTANT: Ne jamais retourner "Error" ou "API Error" - toujours g√©n√©rer du code valide.
    
  test_generation: |
    G√©n√®re des tests complets qui DOIVENT √âCHOUER initialement (phase RED TDD) pour:
    {feature_description}
    
    Exigences:
    - Tests d√©taill√©s couvrant tous les cas d'usage
    - Tests d'erreur et cas limites
    - Mocks appropri√©s pour les d√©pendances
    - Structure de test claire et lisible
    - Assertions pr√©cises et descriptives
    
    Langage: {language}
    Framework de test: {test_framework}
    
  implementation: |
    G√©n√®re l'impl√©mentation MINIMALE pour faire passer ces tests (phase GREEN TDD):
    {test_code}
    
    Pour la feature: {feature_description}
    
    Exigences:
    - Code minimal mais fonctionnel
    - Respecter l'interface d√©finie par les tests
    - Pas de sur-engineering
    - Code propre et lisible
    - Gestion d'erreurs basique
    
    Langage: {language}
    Framework: {framework}
    
  refactoring: |
    Am√©liore ce code (phase REFACTOR TDD) sans casser les tests existants:
    {existing_code}
    
    Tests √† respecter: {test_code}
    
    Am√©liorations √† apporter:
    - Optimisation de la structure
    - Am√©lioration de la lisibilit√©
    - Respect des principes SOLID
    - Ajout de documentation
    - Optimisation des performances si n√©cessaire
    - Gestion d'erreur robuste
    
    IMPORTANT: Les tests existants doivent TOUJOURS passer apr√®s refactoring.

# Configuration des rapports
reporting:
  # Rapports g√©n√©r√©s automatiquement
  auto_reports:
    - name: "tdd_progress_report"
      description: "Rapport d'avancement TDD par issue"
      frequency: "per_issue"
      
    - name: "quality_gates_report"
      description: "Rapport des validations qualit√©"
      frequency: "per_phase"
      
    - name: "test_coverage_report" 
      description: "Rapport de couverture de tests"
      frequency: "final"
      
    - name: "project_summary"
      description: "R√©sum√© final du projet"
      frequency: "completion"

# Messages standards pour GitHub
github_messages:
  issue_start: |
    ü§ñ **D√©veloppement automatique d√©marr√©**
    
    **Phase**: Analyse et planification TDD
    **Orchestrateur**: Universal TDD Orchestrator v1.0
    **Workflow**: RED ‚Üí GREEN ‚Üí REFACTOR
    
    ‚è≥ Analyse en cours...
    
  phase_red: |
    üî¥ **Phase RED - Tests qui √©chouent**
    
    **Statut**: Tests g√©n√©r√©s avec succ√®s
    **R√©sultat attendu**: ‚ùå Tests √©chouent (comportement normal en phase RED)
    
    **Tests cr√©√©s**:
    ```
    {test_files}
    ```
    
    ‚û°Ô∏è **Prochaine √©tape**: Phase GREEN (impl√©mentation minimale)
    
  phase_green: |
    üü¢ **Phase GREEN - Tests passants**
    
    **Statut**: Impl√©mentation minimale cr√©√©e
    **R√©sultat**: ‚úÖ Tests passent maintenant
    
    **Fichiers cr√©√©s/modifi√©s**:
    ```
    {implementation_files}
    ```
    
    ‚û°Ô∏è **Prochaine √©tape**: Phase REFACTOR (am√©lioration du code)
    
  phase_refactor: |
    üîÑ **Phase REFACTOR - Code am√©lior√©**
    
    **Statut**: Code refactoris√© avec succ√®s
    **R√©sultat**: ‚úÖ Tests toujours passants + Qualit√© am√©lior√©e
    
    **Am√©liorations apport√©es**:
    - Structure de code optimis√©e
    - Documentation ajout√©e
    - Gestion d'erreurs robuste
    - Performance optimis√©e
    
    **Validation qualit√©**: {quality_results}
    
    ‚û°Ô∏è **Prochaine √©tape**: Validation finale
    
  issue_completed: |
    ‚úÖ **Issue termin√©e avec succ√®s!**
    
    **Cycle TDD complet**: RED ‚Üí GREEN ‚Üí REFACTOR ‚úÖ
    **Tests**: {test_count} tests, {coverage}% couverture
    **Qualit√©**: Tous les crit√®res respect√©s
    
    **Fichiers livr√©s**:
    {delivered_files}
    
    **Pr√™t pour review!** üöÄ
    
  issue_blocked: |
    üö´ **Issue bloqu√©e - Intervention requise**
    
    **Probl√®me**: {blocking_reason}
    **Phase bloqu√©e**: {blocked_phase}
    
    **Action requise**: {required_action}
    
    L'orchestrateur reprendra automatiquement une fois le probl√®me r√©solu.

# Configuration de validation finale
final_validation:
  required_files:
    - "README.md"
    - "package.json"  # ou √©quivalent selon le type de projet
    
  required_directories:
    - "tests/"  # ou __tests__ selon les conventions
    
  validation_commands:
    # Ces commandes seront adapt√©es selon le type de projet
    - "npm test"  # exemple pour Node.js
    - "npm run lint"
    - "npm run typecheck"